import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";

import { api } from "~/utils/api";
import {SetStateAction, useState} from "react";

export default function Home() {
    const hello = api.weight.userInfo.useQuery({text: "from tRPC"});

    return (
        <>
            <Head>
                <title>Weight Tracker</title>
                <meta name="description" content="Generated by create-t3-app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <main className="min-h-screen  items-start justify-center bg-gradient-to-b from-[#12162C] to-[#15162c]">
                <nav className="flex justify-between w-full">
                    <h1 className="p-4 text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                        Weight <span className="text-[hsl(200,100%,40%)]">Tracker</span>
                    </h1>
                    <div>
                        <AuthModule/>
                    </div>
                </nav>
                <WeightForm/>
                <WeightList/>
            </main>
        </>
    );
}



function WeightForm() {
    const {data: sessionData} = useSession();


    const {mutate, error} = api.weight.create.useMutation();

    const {data: weightEntered} = api.weight.weightForTodayEntered.useQuery({});

    if (!weightEntered) {
    return (
        <div className="w-1/5 mx-auto p-2">
        <form className="flex flex-col items-center justify-center text-amber-50 bg-blue-400 border border-gray-300 rounded-md"
              onSubmit={(e) => {
                  e.preventDefault();
                  const formData = new FormData(e.currentTarget);
                  console.log(formData);
                  mutate({weight: Number(formData.get('weight'))});
              }}>
            <label htmlFor="weight" className="mb-2 text-lg">Enter weight for {new Date().toLocaleDateString()}</label>
            <input name="weight" id="weight" type="number" min="100" max="499" step="0.1"
                   className="mb-2 p-2 border border-gray-300 rounded-md text-blue-900"/>
            <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded-md">Submit</button>
        </form>
        </div>
            )}
    else {
        return
        <div className="flex flex-col items-center justify-center text-amber-50 bg-blue-400 border border-gray-300 rounded-md">Weight Entered for {new Date().toLocaleDateString()}</div>
    }
}

function WeightList() {
    const {data: sessionData} = useSession();
    const {data: weights, isLoading} = api.weight.getWeights.useQuery({});

    if (isLoading) {
        return <p>Loading...</p>;
    }

    if (!weights) {
        return <p>No weights found</p>;
    }

    return (
        <div className="w-2/3 mx-auto p-20" >
        <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
            <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Weight (lbs)
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Date
                </th>
            </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
            {weights.map((weight) => (
                <tr key={weight.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">{weight.weight}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-500">{new Date(weight.createdAt).toLocaleDateString()}</div>
                    </td>
                </tr>
            ))}
            </tbody>
        </table>
    </div>
    );
}


function AuthModule() {
    const {data: sessionData} = useSession();

    const {data: secretMessage} = api.weight.getProtectedMessage.useQuery(
        undefined, // no input
        {enabled: sessionData?.user !== undefined}
    );

    return (
        <div className="flex flex-row gap-4 p-8 bg">
            <p className="text-center text-2xl text-white p-2">
                {secretMessage && <span> {secretMessage}</span>} {sessionData &&
                <span>{sessionData.user?.name}</span>}
            </p>
            <button
                className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
                onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
                {sessionData ? "Sign out" : "Sign in"}
            </button>
        </div>
    );
}
